/* upcb.h
   Generated by wsdl2h 2.8.3 from upcb.wsdl and typemap.dat
   2011-09-09 08:11:37 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on upcb.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__SoapProgramDescriptor.
class ns1__SoapProgramDescriptor;

//  Forward declaration of class ns1__SoapBaseObject.
class ns1__SoapBaseObject;

//  Forward declaration of class ns1__ArrayOfSoapPropertyDescriptor.
class ns1__ArrayOfSoapPropertyDescriptor;

//  Forward declaration of class ns1__SoapPropertyDescriptor.
class ns1__SoapPropertyDescriptor;

//  Forward declaration of class ns1__SoapProgramMappingDescriptor.
class ns1__SoapProgramMappingDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapPinoutDescriptor.
class ns1__ArrayOfSoapPinoutDescriptor;

//  Forward declaration of class ns1__SoapPinoutDescriptor.
class ns1__SoapPinoutDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapCommandDescriptor.
class ns1__ArrayOfSoapCommandDescriptor;

//  Forward declaration of class ns1__SoapCommandDescriptor.
class ns1__SoapCommandDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapCommandParameterDescriptor.
class ns1__ArrayOfSoapCommandParameterDescriptor;

//  Forward declaration of class ns1__SoapCommandParameterDescriptor.
class ns1__SoapCommandParameterDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapEventDescriptor.
class ns1__ArrayOfSoapEventDescriptor;

//  Forward declaration of class ns1__SoapEventDescriptor.
class ns1__SoapEventDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapEventParameterDescriptor.
class ns1__ArrayOfSoapEventParameterDescriptor;

//  Forward declaration of class ns1__SoapEventParameterDescriptor.
class ns1__SoapEventParameterDescriptor;

//  Forward declaration of class ns1__SoapWireConnectionPointDescr.
class ns1__SoapWireConnectionPointDescr;

//  Forward declaration of class ns1__SoapWireDescriptor.
class ns1__SoapWireDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapWireConnectionPointDescr.
class ns1__ArrayOfSoapWireConnectionPointDescr;

//  Forward declaration of class ns1__SoapConnectionPointDescriptor.
class ns1__SoapConnectionPointDescriptor;

//  Forward declaration of class ns1__SoapDeviceDescriptor.
class ns1__SoapDeviceDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapConnectionPointDescriptor.
class ns1__ArrayOfSoapConnectionPointDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapDeviceDescriptor.
class ns1__ArrayOfSoapDeviceDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapWireDescriptor.
class ns1__ArrayOfSoapWireDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapDriverDescriptor.
class ns1__ArrayOfSoapDriverDescriptor;

//  Forward declaration of class ns1__SoapDriverDescriptor.
class ns1__SoapDriverDescriptor;

//  Forward declaration of class ns1__ArrayOfSoapProgramDescriptor.
class ns1__ArrayOfSoapProgramDescriptor;

//  Forward declaration of class _ns1__AddProgram.
class _ns1__AddProgram;

//  Forward declaration of class _ns1__AddProgramResponse.
class _ns1__AddProgramResponse;

//  Forward declaration of class _ns1__StartProgram.
class _ns1__StartProgram;

//  Forward declaration of class _ns1__StartProgramResponse.
class _ns1__StartProgramResponse;

//  Forward declaration of class _ns1__StopProgram.
class _ns1__StopProgram;

//  Forward declaration of class _ns1__StopProgramResponse.
class _ns1__StopProgramResponse;

//  Forward declaration of class _ns1__GetBoardInfo.
class _ns1__GetBoardInfo;

//  Forward declaration of class _ns1__GetBoardInfoResponse.
class _ns1__GetBoardInfoResponse;

//  Forward declaration of class _ns1__GetDevices.
class _ns1__GetDevices;

//  Forward declaration of class _ns1__GetDevicesResponse.
class _ns1__GetDevicesResponse;

//  Forward declaration of class _ns1__GetDrivers.
class _ns1__GetDrivers;

//  Forward declaration of class _ns1__GetDriversResponse.
class _ns1__GetDriversResponse;

//  Forward declaration of class _ns1__GetPrograms.
class _ns1__GetPrograms;

//  Forward declaration of class _ns1__GetProgramsResponse.
class _ns1__GetProgramsResponse;

//  Forward declaration of class _ns1__GetProgram.
class _ns1__GetProgram;

//  Forward declaration of class _ns1__GetProgramResponse.
class _ns1__GetProgramResponse;

//  Forward declaration of class _ns1__GetProgramStatus.
class _ns1__GetProgramStatus;

//  Forward declaration of class _ns1__GetProgramStatusResponse.
class _ns1__GetProgramStatusResponse;

//  Forward declaration of class _ns1__GetRunningProgramsStatus.
class _ns1__GetRunningProgramsStatus;

//  Forward declaration of class _ns1__GetRunningProgramsStatusResponse.
class _ns1__GetRunningProgramsStatusResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/// "http://tempuri.org/":SoapBaseObject is a complexType.
class ns1__SoapBaseObject
{ public:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapPropertyDescriptor is a complexType.
class ns1__ArrayOfSoapPropertyDescriptor
{ public:
/// Vector of ns1__SoapPropertyDescriptor* with length 0..unbounded
    std::vector<ns1__SoapPropertyDescriptor*> SoapPropertyDescriptor         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":SoapPropertyDescriptor is a complexType.
class ns1__SoapPropertyDescriptor
{ public:
/// Element Name of type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element DataType of type xs:string.
    std::string*                         DataType                       0;	///< Optional element.
/// Element Value of type xs:string.
    std::string*                         Value                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapPinoutDescriptor is a complexType.
class ns1__ArrayOfSoapPinoutDescriptor
{ public:
/// Vector of ns1__SoapPinoutDescriptor* with length 0..unbounded
    std::vector<ns1__SoapPinoutDescriptor*> SoapPinoutDescriptor           0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapCommandDescriptor is a complexType.
class ns1__ArrayOfSoapCommandDescriptor
{ public:
/// Vector of ns1__SoapCommandDescriptor* with length 0..unbounded
    std::vector<ns1__SoapCommandDescriptor*> SoapCommandDescriptor          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapCommandParameterDescriptor is a complexType.
class ns1__ArrayOfSoapCommandParameterDescriptor
{ public:
/// Vector of ns1__SoapCommandParameterDescriptor* with length 0..unbounded
    std::vector<ns1__SoapCommandParameterDescriptor*> SoapCommandParameterDescriptor 0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapEventDescriptor is a complexType.
class ns1__ArrayOfSoapEventDescriptor
{ public:
/// Vector of ns1__SoapEventDescriptor* with length 0..unbounded
    std::vector<ns1__SoapEventDescriptor*> SoapEventDescriptor            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapEventParameterDescriptor is a complexType.
class ns1__ArrayOfSoapEventParameterDescriptor
{ public:
/// Vector of ns1__SoapEventParameterDescriptor* with length 0..unbounded
    std::vector<ns1__SoapEventParameterDescriptor*> SoapEventParameterDescriptor   0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapWireConnectionPointDescr is a complexType.
class ns1__ArrayOfSoapWireConnectionPointDescr
{ public:
/// Vector of ns1__SoapWireConnectionPointDescr* with length 0..unbounded
    std::vector<ns1__SoapWireConnectionPointDescr*> SoapWireConnectionPointDescr   0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapConnectionPointDescriptor is a complexType.
class ns1__ArrayOfSoapConnectionPointDescriptor
{ public:
/// Vector of ns1__SoapConnectionPointDescriptor* with length 0..unbounded
    std::vector<ns1__SoapConnectionPointDescriptor*> SoapConnectionPointDescriptor  0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapDeviceDescriptor is a complexType.
class ns1__ArrayOfSoapDeviceDescriptor
{ public:
/// Vector of ns1__SoapDeviceDescriptor* with length 0..unbounded
    std::vector<ns1__SoapDeviceDescriptor*> SoapDeviceDescriptor           0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapWireDescriptor is a complexType.
class ns1__ArrayOfSoapWireDescriptor
{ public:
/// Vector of ns1__SoapWireDescriptor* with length 0..unbounded
    std::vector<ns1__SoapWireDescriptor*> SoapWireDescriptor             0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapDriverDescriptor is a complexType.
class ns1__ArrayOfSoapDriverDescriptor
{ public:
/// Vector of ns1__SoapDriverDescriptor* with length 0..unbounded
    std::vector<ns1__SoapDriverDescriptor*> SoapDriverDescriptor           0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":ArrayOfSoapProgramDescriptor is a complexType.
class ns1__ArrayOfSoapProgramDescriptor
{ public:
/// Vector of ns1__SoapProgramDescriptor* with length 0..unbounded
    std::vector<ns1__SoapProgramDescriptor*> SoapProgramDescriptor          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":AddProgram

/// "http://tempuri.org/":AddProgram is a complexType.
class _ns1__AddProgram
{ public:
/// Element program of type "http://tempuri.org/":SoapProgramDescriptor.
    ns1__SoapProgramDescriptor*          program                        0;	///< Optional element.
/// Element mapping of type "http://tempuri.org/":SoapProgramMappingDescriptor.
    ns1__SoapProgramMappingDescriptor*   mapping                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":AddProgramResponse

/// "http://tempuri.org/":AddProgramResponse is a complexType.
class _ns1__AddProgramResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":StartProgram

/// "http://tempuri.org/":StartProgram is a complexType.
class _ns1__StartProgram
{ public:
/// Element programName of type xs:string.
    std::string*                         programName                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":StartProgramResponse

/// "http://tempuri.org/":StartProgramResponse is a complexType.
class _ns1__StartProgramResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":StopProgram

/// "http://tempuri.org/":StopProgram is a complexType.
class _ns1__StopProgram
{ public:
/// Element programName of type xs:string.
    std::string*                         programName                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":StopProgramResponse

/// "http://tempuri.org/":StopProgramResponse is a complexType.
class _ns1__StopProgramResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetBoardInfo

/// "http://tempuri.org/":GetBoardInfo is a complexType.
class _ns1__GetBoardInfo
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetBoardInfoResponse

/// "http://tempuri.org/":GetBoardInfoResponse is a complexType.
class _ns1__GetBoardInfoResponse
{ public:
/// Element GetBoardInfoResult of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  GetBoardInfoResult             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetDevices

/// "http://tempuri.org/":GetDevices is a complexType.
class _ns1__GetDevices
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetDevicesResponse

/// "http://tempuri.org/":GetDevicesResponse is a complexType.
class _ns1__GetDevicesResponse
{ public:
/// Element GetDevicesResult of type "http://tempuri.org/":ArrayOfSoapDeviceDescriptor.
    ns1__ArrayOfSoapDeviceDescriptor*    GetDevicesResult               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetDrivers

/// "http://tempuri.org/":GetDrivers is a complexType.
class _ns1__GetDrivers
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetDriversResponse

/// "http://tempuri.org/":GetDriversResponse is a complexType.
class _ns1__GetDriversResponse
{ public:
/// Element GetDriversResult of type "http://tempuri.org/":ArrayOfSoapDriverDescriptor.
    ns1__ArrayOfSoapDriverDescriptor*    GetDriversResult               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetPrograms

/// "http://tempuri.org/":GetPrograms is a complexType.
class _ns1__GetPrograms
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetProgramsResponse

/// "http://tempuri.org/":GetProgramsResponse is a complexType.
class _ns1__GetProgramsResponse
{ public:
/// Element GetProgramsResult of type "http://tempuri.org/":ArrayOfSoapProgramDescriptor.
    ns1__ArrayOfSoapProgramDescriptor*   GetProgramsResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetProgram

/// "http://tempuri.org/":GetProgram is a complexType.
class _ns1__GetProgram
{ public:
/// Element programName of type xs:string.
    std::string*                         programName                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetProgramResponse

/// "http://tempuri.org/":GetProgramResponse is a complexType.
class _ns1__GetProgramResponse
{ public:
/// Element GetProgramResult of type "http://tempuri.org/":SoapProgramDescriptor.
    ns1__SoapProgramDescriptor*          GetProgramResult               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetProgramStatus

/// "http://tempuri.org/":GetProgramStatus is a complexType.
class _ns1__GetProgramStatus
{ public:
/// Element programName of type xs:string.
    std::string*                         programName                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetProgramStatusResponse

/// "http://tempuri.org/":GetProgramStatusResponse is a complexType.
class _ns1__GetProgramStatusResponse
{ public:
/// Element GetProgramStatusResult of type "http://tempuri.org/":SoapProgramDescriptor.
    ns1__SoapProgramDescriptor*          GetProgramStatusResult         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetRunningProgramsStatus

/// "http://tempuri.org/":GetRunningProgramsStatus is a complexType.
class _ns1__GetRunningProgramsStatus
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetRunningProgramsStatusResponse

/// "http://tempuri.org/":GetRunningProgramsStatusResponse is a complexType.
class _ns1__GetRunningProgramsStatusResponse
{ public:
/// Element GetRunningProgramsStatusResult of type "http://tempuri.org/":ArrayOfSoapProgramDescriptor.
    ns1__ArrayOfSoapProgramDescriptor*   GetRunningProgramsStatusResult 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://tempuri.org/":SoapProgramDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapProgramDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
/// Element Devices of type "http://tempuri.org/":ArrayOfSoapDeviceDescriptor.
    ns1__ArrayOfSoapDeviceDescriptor*    Devices                        0;	///< Optional element.
/// Element Wires of type "http://tempuri.org/":ArrayOfSoapWireDescriptor.
    ns1__ArrayOfSoapWireDescriptor*      Wires                          0;	///< Optional element.
/// Element PowerWire of type "http://tempuri.org/":SoapWireDescriptor.
    ns1__SoapWireDescriptor*             PowerWire                      0;	///< Optional element.
};

/// "http://tempuri.org/":SoapProgramMappingDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapProgramMappingDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
/// Element PinoutMappings of type "http://tempuri.org/":ArrayOfSoapPinoutDescriptor.
    ns1__ArrayOfSoapPinoutDescriptor*    PinoutMappings                 0;	///< Optional element.
};

/// "http://tempuri.org/":SoapPinoutDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapPinoutDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
/// Element SupportedCommands of type "http://tempuri.org/":ArrayOfSoapCommandDescriptor.
    ns1__ArrayOfSoapCommandDescriptor*   SupportedCommands              0;	///< Optional element.
/// Element SupportedEvents of type "http://tempuri.org/":ArrayOfSoapEventDescriptor.
    ns1__ArrayOfSoapEventDescriptor*     SupportedEvents                0;	///< Optional element.
};

/// "http://tempuri.org/":SoapCommandDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapCommandDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
/// Element CommandParameters of type "http://tempuri.org/":ArrayOfSoapCommandParameterDescriptor.
    ns1__ArrayOfSoapCommandParameterDescriptor*  CommandParameters              0;	///< Optional element.
};

/// "http://tempuri.org/":SoapCommandParameterDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapCommandParameterDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
};

/// "http://tempuri.org/":SoapEventDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapEventDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
/// Element EventParameters of type "http://tempuri.org/":ArrayOfSoapEventParameterDescriptor.
    ns1__ArrayOfSoapEventParameterDescriptor*  EventParameters                0;	///< Optional element.
};

/// "http://tempuri.org/":SoapEventParameterDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapEventParameterDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
};

/// "http://tempuri.org/":SoapWireConnectionPointDescr is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapWireConnectionPointDescr : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
/// Element DeviceDescriptorId of type "http://tempuri.org/":SoapPropertyDescriptor.
    ns1__SoapPropertyDescriptor*         DeviceDescriptorId             0;	///< Optional element.
/// Element ConnectionPointDescriptorId of type "http://tempuri.org/":SoapPropertyDescriptor.
    ns1__SoapPropertyDescriptor*         ConnectionPointDescriptorId    0;	///< Optional element.
};

/// "http://tempuri.org/":SoapWireDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapWireDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
/// Element WireConnectionPoints of type "http://tempuri.org/":ArrayOfSoapWireConnectionPointDescr.
    ns1__ArrayOfSoapWireConnectionPointDescr*  WireConnectionPoints           0;	///< Optional element.
};

/// "http://tempuri.org/":SoapConnectionPointDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapConnectionPointDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
};

/// "http://tempuri.org/":SoapDeviceDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapDeviceDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
/// Element DeviceConnectionPoints of type "http://tempuri.org/":ArrayOfSoapConnectionPointDescriptor.
    ns1__ArrayOfSoapConnectionPointDescriptor*  DeviceConnectionPoints         0;	///< Optional element.
/// Element Pinouts of type "http://tempuri.org/":ArrayOfSoapPinoutDescriptor.
    ns1__ArrayOfSoapPinoutDescriptor*    Pinouts                        0;	///< Optional element.
};

/// "http://tempuri.org/":SoapDriverDescriptor is a complexType with complexContent extension of "http://tempuri.org/":SoapBaseObject.
class ns1__SoapDriverDescriptor : public ns1__SoapBaseObject
{ public:
/*  INHERITED FROM ns1__SoapBaseObject:
/// Element Properties of type "http://tempuri.org/":ArrayOfSoapPropertyDescriptor.
    ns1__ArrayOfSoapPropertyDescriptor*  Properties                     0;	///< Optional element.
    END OF INHERITED FROM ns1__SoapBaseObject */
/// Element SupportedCommands of type "http://tempuri.org/":ArrayOfSoapCommandDescriptor.
    ns1__ArrayOfSoapCommandDescriptor*   SupportedCommands              0;	///< Optional element.
/// Element SupportedEvents of type "http://tempuri.org/":ArrayOfSoapEventDescriptor.
    ns1__ArrayOfSoapEventDescriptor*     SupportedEvents                0;	///< Optional element.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	UPCBWebServiceSoap 
//gsoap ns1  service type:	UPCBWebServiceSoap 
//gsoap ns1  service port:	http://localhost:49865/UPCBWebService.asmx 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref UPCBWebServiceSoap

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page UPCBWebServiceSoap Binding "UPCBWebServiceSoap"

@section UPCBWebServiceSoap_operations Operations of Binding  "UPCBWebServiceSoap"

  - @ref __ns1__AddProgram

  - @ref __ns1__StartProgram

  - @ref __ns1__StopProgram

  - @ref __ns1__GetBoardInfo

  - @ref __ns1__GetDevices

  - @ref __ns1__GetDrivers

  - @ref __ns1__GetPrograms

  - @ref __ns1__GetProgram

  - @ref __ns1__GetProgramStatus

  - @ref __ns1__GetRunningProgramsStatus

@section UPCBWebServiceSoap_ports Endpoints of Binding  "UPCBWebServiceSoap"

  - http://localhost:49865/UPCBWebService.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   UPCBWebServiceSoap                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddProgram                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__AddProgram" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/AddProgram"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddProgram(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__AddProgram*                   ns1__AddProgram,
    // response parameters:
    _ns1__AddProgramResponse*           ns1__AddProgramResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddProgram(
    struct soap *soap,
    // request parameters:
    _ns1__AddProgram*                   ns1__AddProgram,
    // response parameters:
    _ns1__AddProgramResponse*           ns1__AddProgramResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	AddProgram document
//gsoap ns1  service method-encoding:	AddProgram literal
//gsoap ns1  service method-action:	AddProgram http://tempuri.org/AddProgram
int __ns1__AddProgram(
    _ns1__AddProgram*                   ns1__AddProgram,	///< Request parameter
    _ns1__AddProgramResponse*           ns1__AddProgramResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__StartProgram                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__StartProgram" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/StartProgram"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__StartProgram(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__StartProgram*                 ns1__StartProgram,
    // response parameters:
    _ns1__StartProgramResponse*         ns1__StartProgramResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__StartProgram(
    struct soap *soap,
    // request parameters:
    _ns1__StartProgram*                 ns1__StartProgram,
    // response parameters:
    _ns1__StartProgramResponse*         ns1__StartProgramResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	StartProgram document
//gsoap ns1  service method-encoding:	StartProgram literal
//gsoap ns1  service method-action:	StartProgram http://tempuri.org/StartProgram
int __ns1__StartProgram(
    _ns1__StartProgram*                 ns1__StartProgram,	///< Request parameter
    _ns1__StartProgramResponse*         ns1__StartProgramResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__StopProgram                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__StopProgram" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/StopProgram"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__StopProgram(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__StopProgram*                  ns1__StopProgram,
    // response parameters:
    _ns1__StopProgramResponse*          ns1__StopProgramResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__StopProgram(
    struct soap *soap,
    // request parameters:
    _ns1__StopProgram*                  ns1__StopProgram,
    // response parameters:
    _ns1__StopProgramResponse*          ns1__StopProgramResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	StopProgram document
//gsoap ns1  service method-encoding:	StopProgram literal
//gsoap ns1  service method-action:	StopProgram http://tempuri.org/StopProgram
int __ns1__StopProgram(
    _ns1__StopProgram*                  ns1__StopProgram,	///< Request parameter
    _ns1__StopProgramResponse*          ns1__StopProgramResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetBoardInfo                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetBoardInfo" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/GetBoardInfo"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetBoardInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetBoardInfo*                 ns1__GetBoardInfo,
    // response parameters:
    _ns1__GetBoardInfoResponse*         ns1__GetBoardInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetBoardInfo(
    struct soap *soap,
    // request parameters:
    _ns1__GetBoardInfo*                 ns1__GetBoardInfo,
    // response parameters:
    _ns1__GetBoardInfoResponse*         ns1__GetBoardInfoResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetBoardInfo document
//gsoap ns1  service method-encoding:	GetBoardInfo literal
//gsoap ns1  service method-action:	GetBoardInfo http://tempuri.org/GetBoardInfo
int __ns1__GetBoardInfo(
    _ns1__GetBoardInfo*                 ns1__GetBoardInfo,	///< Request parameter
    _ns1__GetBoardInfoResponse*         ns1__GetBoardInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDevices                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetDevices" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/GetDevices"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDevices(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetDevices*                   ns1__GetDevices,
    // response parameters:
    _ns1__GetDevicesResponse*           ns1__GetDevicesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDevices(
    struct soap *soap,
    // request parameters:
    _ns1__GetDevices*                   ns1__GetDevices,
    // response parameters:
    _ns1__GetDevicesResponse*           ns1__GetDevicesResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetDevices document
//gsoap ns1  service method-encoding:	GetDevices literal
//gsoap ns1  service method-action:	GetDevices http://tempuri.org/GetDevices
int __ns1__GetDevices(
    _ns1__GetDevices*                   ns1__GetDevices,	///< Request parameter
    _ns1__GetDevicesResponse*           ns1__GetDevicesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetDrivers                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetDrivers" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/GetDrivers"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetDrivers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetDrivers*                   ns1__GetDrivers,
    // response parameters:
    _ns1__GetDriversResponse*           ns1__GetDriversResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetDrivers(
    struct soap *soap,
    // request parameters:
    _ns1__GetDrivers*                   ns1__GetDrivers,
    // response parameters:
    _ns1__GetDriversResponse*           ns1__GetDriversResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetDrivers document
//gsoap ns1  service method-encoding:	GetDrivers literal
//gsoap ns1  service method-action:	GetDrivers http://tempuri.org/GetDrivers
int __ns1__GetDrivers(
    _ns1__GetDrivers*                   ns1__GetDrivers,	///< Request parameter
    _ns1__GetDriversResponse*           ns1__GetDriversResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetPrograms                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetPrograms" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/GetPrograms"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetPrograms(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetPrograms*                  ns1__GetPrograms,
    // response parameters:
    _ns1__GetProgramsResponse*          ns1__GetProgramsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetPrograms(
    struct soap *soap,
    // request parameters:
    _ns1__GetPrograms*                  ns1__GetPrograms,
    // response parameters:
    _ns1__GetProgramsResponse*          ns1__GetProgramsResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetPrograms document
//gsoap ns1  service method-encoding:	GetPrograms literal
//gsoap ns1  service method-action:	GetPrograms http://tempuri.org/GetPrograms
int __ns1__GetPrograms(
    _ns1__GetPrograms*                  ns1__GetPrograms,	///< Request parameter
    _ns1__GetProgramsResponse*          ns1__GetProgramsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetProgram                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetProgram" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/GetProgram"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetProgram(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetProgram*                   ns1__GetProgram,
    // response parameters:
    _ns1__GetProgramResponse*           ns1__GetProgramResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetProgram(
    struct soap *soap,
    // request parameters:
    _ns1__GetProgram*                   ns1__GetProgram,
    // response parameters:
    _ns1__GetProgramResponse*           ns1__GetProgramResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetProgram document
//gsoap ns1  service method-encoding:	GetProgram literal
//gsoap ns1  service method-action:	GetProgram http://tempuri.org/GetProgram
int __ns1__GetProgram(
    _ns1__GetProgram*                   ns1__GetProgram,	///< Request parameter
    _ns1__GetProgramResponse*           ns1__GetProgramResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetProgramStatus                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetProgramStatus" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/GetProgramStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetProgramStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetProgramStatus*             ns1__GetProgramStatus,
    // response parameters:
    _ns1__GetProgramStatusResponse*     ns1__GetProgramStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetProgramStatus(
    struct soap *soap,
    // request parameters:
    _ns1__GetProgramStatus*             ns1__GetProgramStatus,
    // response parameters:
    _ns1__GetProgramStatusResponse*     ns1__GetProgramStatusResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetProgramStatus document
//gsoap ns1  service method-encoding:	GetProgramStatus literal
//gsoap ns1  service method-action:	GetProgramStatus http://tempuri.org/GetProgramStatus
int __ns1__GetProgramStatus(
    _ns1__GetProgramStatus*             ns1__GetProgramStatus,	///< Request parameter
    _ns1__GetProgramStatusResponse*     ns1__GetProgramStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetRunningProgramsStatus                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetRunningProgramsStatus" of service binding "UPCBWebServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://tempuri.org/GetRunningProgramsStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetRunningProgramsStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetRunningProgramsStatus*     ns1__GetRunningProgramsStatus,
    // response parameters:
    _ns1__GetRunningProgramsStatusResponse* ns1__GetRunningProgramsStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetRunningProgramsStatus(
    struct soap *soap,
    // request parameters:
    _ns1__GetRunningProgramsStatus*     ns1__GetRunningProgramsStatus,
    // response parameters:
    _ns1__GetRunningProgramsStatusResponse* ns1__GetRunningProgramsStatusResponse
  );
@endcode

C++ proxy class (defined in soapUPCBWebServiceSoapProxy.h):
@code
  class UPCBWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUPCBWebServiceSoapService.h):
@code
  class UPCBWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetRunningProgramsStatus document
//gsoap ns1  service method-encoding:	GetRunningProgramsStatus literal
//gsoap ns1  service method-action:	GetRunningProgramsStatus http://tempuri.org/GetRunningProgramsStatus
int __ns1__GetRunningProgramsStatus(
    _ns1__GetRunningProgramsStatus*     ns1__GetRunningProgramsStatus,	///< Request parameter
    _ns1__GetRunningProgramsStatusResponse* ns1__GetRunningProgramsStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <ns1:AddProgram> @ref _ns1__AddProgram
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddProgram(struct soap*, _ns1__AddProgram*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddProgram(struct soap*, _ns1__AddProgram*);
    @endcode

  - <ns1:AddProgramResponse> @ref _ns1__AddProgramResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddProgramResponse(struct soap*, _ns1__AddProgramResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddProgramResponse(struct soap*, _ns1__AddProgramResponse*);
    @endcode

  - <ns1:StartProgram> @ref _ns1__StartProgram
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StartProgram(struct soap*, _ns1__StartProgram*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StartProgram(struct soap*, _ns1__StartProgram*);
    @endcode

  - <ns1:StartProgramResponse> @ref _ns1__StartProgramResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StartProgramResponse(struct soap*, _ns1__StartProgramResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StartProgramResponse(struct soap*, _ns1__StartProgramResponse*);
    @endcode

  - <ns1:StopProgram> @ref _ns1__StopProgram
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopProgram(struct soap*, _ns1__StopProgram*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopProgram(struct soap*, _ns1__StopProgram*);
    @endcode

  - <ns1:StopProgramResponse> @ref _ns1__StopProgramResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopProgramResponse(struct soap*, _ns1__StopProgramResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopProgramResponse(struct soap*, _ns1__StopProgramResponse*);
    @endcode

  - <ns1:GetBoardInfo> @ref _ns1__GetBoardInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetBoardInfo(struct soap*, _ns1__GetBoardInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetBoardInfo(struct soap*, _ns1__GetBoardInfo*);
    @endcode

  - <ns1:GetBoardInfoResponse> @ref _ns1__GetBoardInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetBoardInfoResponse(struct soap*, _ns1__GetBoardInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetBoardInfoResponse(struct soap*, _ns1__GetBoardInfoResponse*);
    @endcode

  - <ns1:GetDevices> @ref _ns1__GetDevices
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDevices(struct soap*, _ns1__GetDevices*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDevices(struct soap*, _ns1__GetDevices*);
    @endcode

  - <ns1:GetDevicesResponse> @ref _ns1__GetDevicesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDevicesResponse(struct soap*, _ns1__GetDevicesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDevicesResponse(struct soap*, _ns1__GetDevicesResponse*);
    @endcode

  - <ns1:GetDrivers> @ref _ns1__GetDrivers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDrivers(struct soap*, _ns1__GetDrivers*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDrivers(struct soap*, _ns1__GetDrivers*);
    @endcode

  - <ns1:GetDriversResponse> @ref _ns1__GetDriversResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetDriversResponse(struct soap*, _ns1__GetDriversResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetDriversResponse(struct soap*, _ns1__GetDriversResponse*);
    @endcode

  - <ns1:GetPrograms> @ref _ns1__GetPrograms
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetPrograms(struct soap*, _ns1__GetPrograms*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetPrograms(struct soap*, _ns1__GetPrograms*);
    @endcode

  - <ns1:GetProgramsResponse> @ref _ns1__GetProgramsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetProgramsResponse(struct soap*, _ns1__GetProgramsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetProgramsResponse(struct soap*, _ns1__GetProgramsResponse*);
    @endcode

  - <ns1:GetProgram> @ref _ns1__GetProgram
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetProgram(struct soap*, _ns1__GetProgram*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetProgram(struct soap*, _ns1__GetProgram*);
    @endcode

  - <ns1:GetProgramResponse> @ref _ns1__GetProgramResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetProgramResponse(struct soap*, _ns1__GetProgramResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetProgramResponse(struct soap*, _ns1__GetProgramResponse*);
    @endcode

  - <ns1:GetProgramStatus> @ref _ns1__GetProgramStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetProgramStatus(struct soap*, _ns1__GetProgramStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetProgramStatus(struct soap*, _ns1__GetProgramStatus*);
    @endcode

  - <ns1:GetProgramStatusResponse> @ref _ns1__GetProgramStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetProgramStatusResponse(struct soap*, _ns1__GetProgramStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetProgramStatusResponse(struct soap*, _ns1__GetProgramStatusResponse*);
    @endcode

  - <ns1:GetRunningProgramsStatus> @ref _ns1__GetRunningProgramsStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRunningProgramsStatus(struct soap*, _ns1__GetRunningProgramsStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRunningProgramsStatus(struct soap*, _ns1__GetRunningProgramsStatus*);
    @endcode

  - <ns1:GetRunningProgramsStatusResponse> @ref _ns1__GetRunningProgramsStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRunningProgramsStatusResponse(struct soap*, _ns1__GetRunningProgramsStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRunningProgramsStatusResponse(struct soap*, _ns1__GetRunningProgramsStatusResponse*);
    @endcode

*/

/* End of upcb.h */
