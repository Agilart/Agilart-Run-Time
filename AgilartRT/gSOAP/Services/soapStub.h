/* soapStub.h
   Generated by gSOAP 2.8.3 from upcb.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__SoapBaseObject
#define SOAP_TYPE_ns1__SoapBaseObject (9)
/* ns1:SoapBaseObject */
class SOAP_CMAC ns1__SoapBaseObject
{
public:
	class ns1__ArrayOfSoapPropertyDescriptor *Properties;	/* optional element of type ns1:ArrayOfSoapPropertyDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns1__SoapBaseObject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapBaseObject() { ns1__SoapBaseObject::soap_default(NULL); }
	virtual ~ns1__SoapBaseObject() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapPropertyDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapPropertyDescriptor (10)
/* ns1:ArrayOfSoapPropertyDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapPropertyDescriptor
{
public:
	std::vector<class ns1__SoapPropertyDescriptor * >SoapPropertyDescriptor;	/* optional element of type ns1:SoapPropertyDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapPropertyDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapPropertyDescriptor() { ns1__ArrayOfSoapPropertyDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapPropertyDescriptor() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__SoapPropertyDescriptor
#define SOAP_TYPE_ns1__SoapPropertyDescriptor (11)
/* ns1:SoapPropertyDescriptor */
class SOAP_CMAC ns1__SoapPropertyDescriptor
{
public:
	std::string *Name;	/* optional element of type xsd:string */
	std::string *DataType;	/* optional element of type xsd:string */
	std::string *Value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns1__SoapPropertyDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapPropertyDescriptor() { ns1__SoapPropertyDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapPropertyDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapPinoutDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapPinoutDescriptor (13)
/* ns1:ArrayOfSoapPinoutDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapPinoutDescriptor
{
public:
	std::vector<class ns1__SoapPinoutDescriptor * >SoapPinoutDescriptor;	/* optional element of type ns1:SoapPinoutDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapPinoutDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapPinoutDescriptor() { ns1__ArrayOfSoapPinoutDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapPinoutDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapCommandDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapCommandDescriptor (15)
/* ns1:ArrayOfSoapCommandDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapCommandDescriptor
{
public:
	std::vector<class ns1__SoapCommandDescriptor * >SoapCommandDescriptor;	/* optional element of type ns1:SoapCommandDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapCommandDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapCommandDescriptor() { ns1__ArrayOfSoapCommandDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapCommandDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapCommandParameterDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapCommandParameterDescriptor (17)
/* ns1:ArrayOfSoapCommandParameterDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapCommandParameterDescriptor
{
public:
	std::vector<class ns1__SoapCommandParameterDescriptor * >SoapCommandParameterDescriptor;	/* optional element of type ns1:SoapCommandParameterDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapCommandParameterDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapCommandParameterDescriptor() { ns1__ArrayOfSoapCommandParameterDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapCommandParameterDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapEventDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapEventDescriptor (19)
/* ns1:ArrayOfSoapEventDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapEventDescriptor
{
public:
	std::vector<class ns1__SoapEventDescriptor * >SoapEventDescriptor;	/* optional element of type ns1:SoapEventDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapEventDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapEventDescriptor() { ns1__ArrayOfSoapEventDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapEventDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapEventParameterDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapEventParameterDescriptor (21)
/* ns1:ArrayOfSoapEventParameterDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapEventParameterDescriptor
{
public:
	std::vector<class ns1__SoapEventParameterDescriptor * >SoapEventParameterDescriptor;	/* optional element of type ns1:SoapEventParameterDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapEventParameterDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapEventParameterDescriptor() { ns1__ArrayOfSoapEventParameterDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapEventParameterDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapWireConnectionPointDescr
#define SOAP_TYPE_ns1__ArrayOfSoapWireConnectionPointDescr (25)
/* ns1:ArrayOfSoapWireConnectionPointDescr */
class SOAP_CMAC ns1__ArrayOfSoapWireConnectionPointDescr
{
public:
	std::vector<class ns1__SoapWireConnectionPointDescr * >SoapWireConnectionPointDescr;	/* optional element of type ns1:SoapWireConnectionPointDescr */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapWireConnectionPointDescr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapWireConnectionPointDescr() { ns1__ArrayOfSoapWireConnectionPointDescr::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapWireConnectionPointDescr() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapConnectionPointDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapConnectionPointDescriptor (28)
/* ns1:ArrayOfSoapConnectionPointDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapConnectionPointDescriptor
{
public:
	std::vector<class ns1__SoapConnectionPointDescriptor * >SoapConnectionPointDescriptor;	/* optional element of type ns1:SoapConnectionPointDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapConnectionPointDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapConnectionPointDescriptor() { ns1__ArrayOfSoapConnectionPointDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapConnectionPointDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapDeviceDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapDeviceDescriptor (29)
/* ns1:ArrayOfSoapDeviceDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapDeviceDescriptor
{
public:
	std::vector<class ns1__SoapDeviceDescriptor * >SoapDeviceDescriptor;	/* optional element of type ns1:SoapDeviceDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapDeviceDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapDeviceDescriptor() { ns1__ArrayOfSoapDeviceDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapDeviceDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapWireDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapWireDescriptor (30)
/* ns1:ArrayOfSoapWireDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapWireDescriptor
{
public:
	std::vector<class ns1__SoapWireDescriptor * >SoapWireDescriptor;	/* optional element of type ns1:SoapWireDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapWireDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapWireDescriptor() { ns1__ArrayOfSoapWireDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapWireDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapDriverDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapDriverDescriptor (31)
/* ns1:ArrayOfSoapDriverDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapDriverDescriptor
{
public:
	std::vector<class ns1__SoapDriverDescriptor * >SoapDriverDescriptor;	/* optional element of type ns1:SoapDriverDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapDriverDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapDriverDescriptor() { ns1__ArrayOfSoapDriverDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapDriverDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSoapProgramDescriptor
#define SOAP_TYPE_ns1__ArrayOfSoapProgramDescriptor (33)
/* ns1:ArrayOfSoapProgramDescriptor */
class SOAP_CMAC ns1__ArrayOfSoapProgramDescriptor
{
public:
	std::vector<class ns1__SoapProgramDescriptor * >SoapProgramDescriptor;	/* optional element of type ns1:SoapProgramDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns1__ArrayOfSoapProgramDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSoapProgramDescriptor() { ns1__ArrayOfSoapProgramDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfSoapProgramDescriptor() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddProgram
#define SOAP_TYPE__ns1__AddProgram (34)
/* ns1:AddProgram */
class SOAP_CMAC _ns1__AddProgram
{
public:
	ns1__SoapProgramDescriptor *program;	/* optional element of type ns1:SoapProgramDescriptor */
	class ns1__SoapProgramMappingDescriptor *mapping;	/* optional element of type ns1:SoapProgramMappingDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE__ns1__AddProgram */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddProgram() { _ns1__AddProgram::soap_default(NULL); }
	virtual ~_ns1__AddProgram() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddProgramResponse
#define SOAP_TYPE__ns1__AddProgramResponse (35)
/* ns1:AddProgramResponse */
class SOAP_CMAC _ns1__AddProgramResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE__ns1__AddProgramResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddProgramResponse() { _ns1__AddProgramResponse::soap_default(NULL); }
	virtual ~_ns1__AddProgramResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StartProgram
#define SOAP_TYPE__ns1__StartProgram (36)
/* ns1:StartProgram */
class SOAP_CMAC _ns1__StartProgram
{
public:
	std::string *programName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE__ns1__StartProgram */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StartProgram() { _ns1__StartProgram::soap_default(NULL); }
	virtual ~_ns1__StartProgram() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StartProgramResponse
#define SOAP_TYPE__ns1__StartProgramResponse (37)
/* ns1:StartProgramResponse */
class SOAP_CMAC _ns1__StartProgramResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE__ns1__StartProgramResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StartProgramResponse() { _ns1__StartProgramResponse::soap_default(NULL); }
	virtual ~_ns1__StartProgramResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StopProgram
#define SOAP_TYPE__ns1__StopProgram (38)
/* ns1:StopProgram */
class SOAP_CMAC _ns1__StopProgram
{
public:
	std::string *programName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE__ns1__StopProgram */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StopProgram() { _ns1__StopProgram::soap_default(NULL); }
	virtual ~_ns1__StopProgram() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StopProgramResponse
#define SOAP_TYPE__ns1__StopProgramResponse (39)
/* ns1:StopProgramResponse */
class SOAP_CMAC _ns1__StopProgramResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE__ns1__StopProgramResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StopProgramResponse() { _ns1__StopProgramResponse::soap_default(NULL); }
	virtual ~_ns1__StopProgramResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetBoardInfo
#define SOAP_TYPE__ns1__GetBoardInfo (40)
/* ns1:GetBoardInfo */
class SOAP_CMAC _ns1__GetBoardInfo
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE__ns1__GetBoardInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetBoardInfo() { _ns1__GetBoardInfo::soap_default(NULL); }
	virtual ~_ns1__GetBoardInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetBoardInfoResponse
#define SOAP_TYPE__ns1__GetBoardInfoResponse (41)
/* ns1:GetBoardInfoResponse */
class SOAP_CMAC _ns1__GetBoardInfoResponse
{
public:
	ns1__ArrayOfSoapPropertyDescriptor *GetBoardInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfSoapPropertyDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE__ns1__GetBoardInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetBoardInfoResponse() { _ns1__GetBoardInfoResponse::soap_default(NULL); }
	virtual ~_ns1__GetBoardInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetDevices
#define SOAP_TYPE__ns1__GetDevices (42)
/* ns1:GetDevices */
class SOAP_CMAC _ns1__GetDevices
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE__ns1__GetDevices */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetDevices() { _ns1__GetDevices::soap_default(NULL); }
	virtual ~_ns1__GetDevices() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetDevicesResponse
#define SOAP_TYPE__ns1__GetDevicesResponse (43)
/* ns1:GetDevicesResponse */
class SOAP_CMAC _ns1__GetDevicesResponse
{
public:
	ns1__ArrayOfSoapDeviceDescriptor *GetDevicesResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfSoapDeviceDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__ns1__GetDevicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetDevicesResponse() { _ns1__GetDevicesResponse::soap_default(NULL); }
	virtual ~_ns1__GetDevicesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetDrivers
#define SOAP_TYPE__ns1__GetDrivers (44)
/* ns1:GetDrivers */
class SOAP_CMAC _ns1__GetDrivers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE__ns1__GetDrivers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetDrivers() { _ns1__GetDrivers::soap_default(NULL); }
	virtual ~_ns1__GetDrivers() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetDriversResponse
#define SOAP_TYPE__ns1__GetDriversResponse (45)
/* ns1:GetDriversResponse */
class SOAP_CMAC _ns1__GetDriversResponse
{
public:
	ns1__ArrayOfSoapDriverDescriptor *GetDriversResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfSoapDriverDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE__ns1__GetDriversResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetDriversResponse() { _ns1__GetDriversResponse::soap_default(NULL); }
	virtual ~_ns1__GetDriversResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetPrograms
#define SOAP_TYPE__ns1__GetPrograms (46)
/* ns1:GetPrograms */
class SOAP_CMAC _ns1__GetPrograms
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE__ns1__GetPrograms */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetPrograms() { _ns1__GetPrograms::soap_default(NULL); }
	virtual ~_ns1__GetPrograms() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetProgramsResponse
#define SOAP_TYPE__ns1__GetProgramsResponse (47)
/* ns1:GetProgramsResponse */
class SOAP_CMAC _ns1__GetProgramsResponse
{
public:
	ns1__ArrayOfSoapProgramDescriptor *GetProgramsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfSoapProgramDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE__ns1__GetProgramsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetProgramsResponse() { _ns1__GetProgramsResponse::soap_default(NULL); }
	virtual ~_ns1__GetProgramsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetProgram
#define SOAP_TYPE__ns1__GetProgram (48)
/* ns1:GetProgram */
class SOAP_CMAC _ns1__GetProgram
{
public:
	std::string *programName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE__ns1__GetProgram */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetProgram() { _ns1__GetProgram::soap_default(NULL); }
	virtual ~_ns1__GetProgram() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetProgramResponse
#define SOAP_TYPE__ns1__GetProgramResponse (49)
/* ns1:GetProgramResponse */
class SOAP_CMAC _ns1__GetProgramResponse
{
public:
	ns1__SoapProgramDescriptor *GetProgramResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:SoapProgramDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE__ns1__GetProgramResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetProgramResponse() { _ns1__GetProgramResponse::soap_default(NULL); }
	virtual ~_ns1__GetProgramResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetProgramStatus
#define SOAP_TYPE__ns1__GetProgramStatus (50)
/* ns1:GetProgramStatus */
class SOAP_CMAC _ns1__GetProgramStatus
{
public:
	std::string *programName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE__ns1__GetProgramStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetProgramStatus() { _ns1__GetProgramStatus::soap_default(NULL); }
	virtual ~_ns1__GetProgramStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetProgramStatusResponse
#define SOAP_TYPE__ns1__GetProgramStatusResponse (51)
/* ns1:GetProgramStatusResponse */
class SOAP_CMAC _ns1__GetProgramStatusResponse
{
public:
	ns1__SoapProgramDescriptor *GetProgramStatusResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:SoapProgramDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE__ns1__GetProgramStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetProgramStatusResponse() { _ns1__GetProgramStatusResponse::soap_default(NULL); }
	virtual ~_ns1__GetProgramStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetRunningProgramsStatus
#define SOAP_TYPE__ns1__GetRunningProgramsStatus (52)
/* ns1:GetRunningProgramsStatus */
class SOAP_CMAC _ns1__GetRunningProgramsStatus
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__ns1__GetRunningProgramsStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetRunningProgramsStatus() { _ns1__GetRunningProgramsStatus::soap_default(NULL); }
	virtual ~_ns1__GetRunningProgramsStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetRunningProgramsStatusResponse
#define SOAP_TYPE__ns1__GetRunningProgramsStatusResponse (53)
/* ns1:GetRunningProgramsStatusResponse */
class SOAP_CMAC _ns1__GetRunningProgramsStatusResponse
{
public:
	ns1__ArrayOfSoapProgramDescriptor *GetRunningProgramsStatusResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfSoapProgramDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE__ns1__GetRunningProgramsStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetRunningProgramsStatusResponse() { _ns1__GetRunningProgramsStatusResponse::soap_default(NULL); }
	virtual ~_ns1__GetRunningProgramsStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapProgramDescriptor
#define SOAP_TYPE_ns1__SoapProgramDescriptor (8)
/* ns1:SoapProgramDescriptor */
class SOAP_CMAC ns1__SoapProgramDescriptor : public ns1__SoapBaseObject
{
public:
	ns1__ArrayOfSoapDeviceDescriptor *Devices;	/* optional element of type ns1:ArrayOfSoapDeviceDescriptor */
	ns1__ArrayOfSoapWireDescriptor *Wires;	/* optional element of type ns1:ArrayOfSoapWireDescriptor */
	ns1__SoapWireDescriptor *PowerWire;	/* optional element of type ns1:SoapWireDescriptor */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns1__SoapProgramDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapProgramDescriptor() { ns1__SoapProgramDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapProgramDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapProgramMappingDescriptor
#define SOAP_TYPE_ns1__SoapProgramMappingDescriptor (12)
/* ns1:SoapProgramMappingDescriptor */
class SOAP_CMAC ns1__SoapProgramMappingDescriptor : public ns1__SoapBaseObject
{
public:
	ns1__ArrayOfSoapPinoutDescriptor *PinoutMappings;	/* optional element of type ns1:ArrayOfSoapPinoutDescriptor */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__SoapProgramMappingDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapProgramMappingDescriptor() { ns1__SoapProgramMappingDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapProgramMappingDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapPinoutDescriptor
#define SOAP_TYPE_ns1__SoapPinoutDescriptor (14)
/* ns1:SoapPinoutDescriptor */
class SOAP_CMAC ns1__SoapPinoutDescriptor : public ns1__SoapBaseObject
{
public:
	ns1__ArrayOfSoapCommandDescriptor *SupportedCommands;	/* optional element of type ns1:ArrayOfSoapCommandDescriptor */
	ns1__ArrayOfSoapEventDescriptor *SupportedEvents;	/* optional element of type ns1:ArrayOfSoapEventDescriptor */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns1__SoapPinoutDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapPinoutDescriptor() { ns1__SoapPinoutDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapPinoutDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapCommandDescriptor
#define SOAP_TYPE_ns1__SoapCommandDescriptor (16)
/* ns1:SoapCommandDescriptor */
class SOAP_CMAC ns1__SoapCommandDescriptor : public ns1__SoapBaseObject
{
public:
	ns1__ArrayOfSoapCommandParameterDescriptor *CommandParameters;	/* optional element of type ns1:ArrayOfSoapCommandParameterDescriptor */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns1__SoapCommandDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapCommandDescriptor() { ns1__SoapCommandDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapCommandDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapCommandParameterDescriptor
#define SOAP_TYPE_ns1__SoapCommandParameterDescriptor (18)
/* ns1:SoapCommandParameterDescriptor */
class SOAP_CMAC ns1__SoapCommandParameterDescriptor : public ns1__SoapBaseObject
{
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns1__SoapCommandParameterDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapCommandParameterDescriptor() { ns1__SoapCommandParameterDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapCommandParameterDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapEventDescriptor
#define SOAP_TYPE_ns1__SoapEventDescriptor (20)
/* ns1:SoapEventDescriptor */
class SOAP_CMAC ns1__SoapEventDescriptor : public ns1__SoapBaseObject
{
public:
	ns1__ArrayOfSoapEventParameterDescriptor *EventParameters;	/* optional element of type ns1:ArrayOfSoapEventParameterDescriptor */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns1__SoapEventDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapEventDescriptor() { ns1__SoapEventDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapEventDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapEventParameterDescriptor
#define SOAP_TYPE_ns1__SoapEventParameterDescriptor (22)
/* ns1:SoapEventParameterDescriptor */
class SOAP_CMAC ns1__SoapEventParameterDescriptor : public ns1__SoapBaseObject
{
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns1__SoapEventParameterDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapEventParameterDescriptor() { ns1__SoapEventParameterDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapEventParameterDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapWireConnectionPointDescr
#define SOAP_TYPE_ns1__SoapWireConnectionPointDescr (23)
/* ns1:SoapWireConnectionPointDescr */
class SOAP_CMAC ns1__SoapWireConnectionPointDescr : public ns1__SoapBaseObject
{
public:
	ns1__SoapPropertyDescriptor *DeviceDescriptorId;	/* optional element of type ns1:SoapPropertyDescriptor */
	ns1__SoapPropertyDescriptor *ConnectionPointDescriptorId;	/* optional element of type ns1:SoapPropertyDescriptor */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns1__SoapWireConnectionPointDescr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapWireConnectionPointDescr() { ns1__SoapWireConnectionPointDescr::soap_default(NULL); }
	virtual ~ns1__SoapWireConnectionPointDescr() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapWireDescriptor
#define SOAP_TYPE_ns1__SoapWireDescriptor (24)
/* ns1:SoapWireDescriptor */
class SOAP_CMAC ns1__SoapWireDescriptor : public ns1__SoapBaseObject
{
public:
	ns1__ArrayOfSoapWireConnectionPointDescr *WireConnectionPoints;	/* optional element of type ns1:ArrayOfSoapWireConnectionPointDescr */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns1__SoapWireDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapWireDescriptor() { ns1__SoapWireDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapWireDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapConnectionPointDescriptor
#define SOAP_TYPE_ns1__SoapConnectionPointDescriptor (26)
/* ns1:SoapConnectionPointDescriptor */
class SOAP_CMAC ns1__SoapConnectionPointDescriptor : public ns1__SoapBaseObject
{
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns1__SoapConnectionPointDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapConnectionPointDescriptor() { ns1__SoapConnectionPointDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapConnectionPointDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapDeviceDescriptor
#define SOAP_TYPE_ns1__SoapDeviceDescriptor (27)
/* ns1:SoapDeviceDescriptor */
class SOAP_CMAC ns1__SoapDeviceDescriptor : public ns1__SoapBaseObject
{
public:
	ns1__ArrayOfSoapConnectionPointDescriptor *DeviceConnectionPoints;	/* optional element of type ns1:ArrayOfSoapConnectionPointDescriptor */
	ns1__ArrayOfSoapPinoutDescriptor *Pinouts;	/* optional element of type ns1:ArrayOfSoapPinoutDescriptor */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns1__SoapDeviceDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapDeviceDescriptor() { ns1__SoapDeviceDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapDeviceDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoapDriverDescriptor
#define SOAP_TYPE_ns1__SoapDriverDescriptor (32)
/* ns1:SoapDriverDescriptor */
class SOAP_CMAC ns1__SoapDriverDescriptor : public ns1__SoapBaseObject
{
public:
	ns1__ArrayOfSoapCommandDescriptor *SupportedCommands;	/* optional element of type ns1:ArrayOfSoapCommandDescriptor */
	ns1__ArrayOfSoapEventDescriptor *SupportedEvents;	/* optional element of type ns1:ArrayOfSoapEventDescriptor */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns1__SoapDriverDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoapDriverDescriptor() { ns1__SoapDriverDescriptor::soap_default(NULL); }
	virtual ~ns1__SoapDriverDescriptor() { }
};
#endif

#ifndef SOAP_TYPE___ns1__AddProgram
#define SOAP_TYPE___ns1__AddProgram (97)
/* Operation wrapper: */
struct __ns1__AddProgram
{
public:
	_ns1__AddProgram *ns1__AddProgram;	/* optional element of type ns1:AddProgram */
};
#endif

#ifndef SOAP_TYPE___ns1__StartProgram
#define SOAP_TYPE___ns1__StartProgram (101)
/* Operation wrapper: */
struct __ns1__StartProgram
{
public:
	_ns1__StartProgram *ns1__StartProgram;	/* optional element of type ns1:StartProgram */
};
#endif

#ifndef SOAP_TYPE___ns1__StopProgram
#define SOAP_TYPE___ns1__StopProgram (105)
/* Operation wrapper: */
struct __ns1__StopProgram
{
public:
	_ns1__StopProgram *ns1__StopProgram;	/* optional element of type ns1:StopProgram */
};
#endif

#ifndef SOAP_TYPE___ns1__GetBoardInfo
#define SOAP_TYPE___ns1__GetBoardInfo (109)
/* Operation wrapper: */
struct __ns1__GetBoardInfo
{
public:
	_ns1__GetBoardInfo *ns1__GetBoardInfo;	/* optional element of type ns1:GetBoardInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDevices
#define SOAP_TYPE___ns1__GetDevices (113)
/* Operation wrapper: */
struct __ns1__GetDevices
{
public:
	_ns1__GetDevices *ns1__GetDevices;	/* optional element of type ns1:GetDevices */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDrivers
#define SOAP_TYPE___ns1__GetDrivers (117)
/* Operation wrapper: */
struct __ns1__GetDrivers
{
public:
	_ns1__GetDrivers *ns1__GetDrivers;	/* optional element of type ns1:GetDrivers */
};
#endif

#ifndef SOAP_TYPE___ns1__GetPrograms
#define SOAP_TYPE___ns1__GetPrograms (121)
/* Operation wrapper: */
struct __ns1__GetPrograms
{
public:
	_ns1__GetPrograms *ns1__GetPrograms;	/* optional element of type ns1:GetPrograms */
};
#endif

#ifndef SOAP_TYPE___ns1__GetProgram
#define SOAP_TYPE___ns1__GetProgram (125)
/* Operation wrapper: */
struct __ns1__GetProgram
{
public:
	_ns1__GetProgram *ns1__GetProgram;	/* optional element of type ns1:GetProgram */
};
#endif

#ifndef SOAP_TYPE___ns1__GetProgramStatus
#define SOAP_TYPE___ns1__GetProgramStatus (129)
/* Operation wrapper: */
struct __ns1__GetProgramStatus
{
public:
	_ns1__GetProgramStatus *ns1__GetProgramStatus;	/* optional element of type ns1:GetProgramStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__GetRunningProgramsStatus
#define SOAP_TYPE___ns1__GetRunningProgramsStatus (133)
/* Operation wrapper: */
struct __ns1__GetRunningProgramsStatus
{
public:
	_ns1__GetRunningProgramsStatus *ns1__GetRunningProgramsStatus;	/* optional element of type ns1:GetRunningProgramsStatus */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (134)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (135)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (137)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (140)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (141)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
