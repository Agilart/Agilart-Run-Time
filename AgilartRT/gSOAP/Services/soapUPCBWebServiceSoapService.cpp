/* soapUPCBWebServiceSoapService.cpp
   Generated by gSOAP 2.8.3 from upcb.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapUPCBWebServiceSoapService.h"

UPCBWebServiceSoapService::UPCBWebServiceSoapService()
{	UPCBWebServiceSoapService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

UPCBWebServiceSoapService::UPCBWebServiceSoapService(const struct soap &_soap) : soap(_soap)
{ }

UPCBWebServiceSoapService::UPCBWebServiceSoapService(soap_mode iomode)
{	UPCBWebServiceSoapService_init(iomode, iomode);
}

UPCBWebServiceSoapService::UPCBWebServiceSoapService(soap_mode imode, soap_mode omode)
{	UPCBWebServiceSoapService_init(imode, omode);
}

UPCBWebServiceSoapService::~UPCBWebServiceSoapService()
{ }

void UPCBWebServiceSoapService::UPCBWebServiceSoapService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://tempuri.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
};

void UPCBWebServiceSoapService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

#ifndef WITH_PURE_VIRTUAL
UPCBWebServiceSoapService *UPCBWebServiceSoapService::copy()
{	UPCBWebServiceSoapService *dup = SOAP_NEW_COPY(UPCBWebServiceSoapService(*(struct soap*)this));
	return dup;
}
#endif

int UPCBWebServiceSoapService::soap_close_socket()
{	return soap_closesock(this);
}

int UPCBWebServiceSoapService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int UPCBWebServiceSoapService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int UPCBWebServiceSoapService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int UPCBWebServiceSoapService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void UPCBWebServiceSoapService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void UPCBWebServiceSoapService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *UPCBWebServiceSoapService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void UPCBWebServiceSoapService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *UPCBWebServiceSoapService::soap_header()
{	return this->header;
}

int UPCBWebServiceSoapService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET UPCBWebServiceSoapService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET UPCBWebServiceSoapService::accept()
{	return soap_accept(this);
}

int UPCBWebServiceSoapService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__AddProgram(UPCBWebServiceSoapService*);
static int serve___ns1__StartProgram(UPCBWebServiceSoapService*);
static int serve___ns1__StopProgram(UPCBWebServiceSoapService*);
static int serve___ns1__GetBoardInfo(UPCBWebServiceSoapService*);
static int serve___ns1__GetDevices(UPCBWebServiceSoapService*);
static int serve___ns1__GetDrivers(UPCBWebServiceSoapService*);
static int serve___ns1__GetPrograms(UPCBWebServiceSoapService*);
static int serve___ns1__GetProgram(UPCBWebServiceSoapService*);
static int serve___ns1__GetProgramStatus(UPCBWebServiceSoapService*);
static int serve___ns1__GetRunningProgramsStatus(UPCBWebServiceSoapService*);

int UPCBWebServiceSoapService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns1:AddProgram"))
		return serve___ns1__AddProgram(this);
	if (!soap_match_tag(this, this->tag, "ns1:StartProgram"))
		return serve___ns1__StartProgram(this);
	if (!soap_match_tag(this, this->tag, "ns1:StopProgram"))
		return serve___ns1__StopProgram(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetBoardInfo"))
		return serve___ns1__GetBoardInfo(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetDevices"))
		return serve___ns1__GetDevices(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetDrivers"))
		return serve___ns1__GetDrivers(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetPrograms"))
		return serve___ns1__GetPrograms(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetProgram"))
		return serve___ns1__GetProgram(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetProgramStatus"))
		return serve___ns1__GetProgramStatus(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetRunningProgramsStatus"))
		return serve___ns1__GetRunningProgramsStatus(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___ns1__AddProgram(UPCBWebServiceSoapService *soap)
{	struct __ns1__AddProgram soap_tmp___ns1__AddProgram;
	_ns1__AddProgramResponse ns1__AddProgramResponse;
	ns1__AddProgramResponse.soap_default(soap);
	soap_default___ns1__AddProgram(soap, &soap_tmp___ns1__AddProgram);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__AddProgram(soap, &soap_tmp___ns1__AddProgram, "-ns1:AddProgram", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->AddProgram(soap_tmp___ns1__AddProgram.ns1__AddProgram, &ns1__AddProgramResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__AddProgramResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__AddProgramResponse.soap_put(soap, "ns1:AddProgramResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__AddProgramResponse.soap_put(soap, "ns1:AddProgramResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__StartProgram(UPCBWebServiceSoapService *soap)
{	struct __ns1__StartProgram soap_tmp___ns1__StartProgram;
	_ns1__StartProgramResponse ns1__StartProgramResponse;
	ns1__StartProgramResponse.soap_default(soap);
	soap_default___ns1__StartProgram(soap, &soap_tmp___ns1__StartProgram);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__StartProgram(soap, &soap_tmp___ns1__StartProgram, "-ns1:StartProgram", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->StartProgram(soap_tmp___ns1__StartProgram.ns1__StartProgram, &ns1__StartProgramResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__StartProgramResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StartProgramResponse.soap_put(soap, "ns1:StartProgramResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StartProgramResponse.soap_put(soap, "ns1:StartProgramResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__StopProgram(UPCBWebServiceSoapService *soap)
{	struct __ns1__StopProgram soap_tmp___ns1__StopProgram;
	_ns1__StopProgramResponse ns1__StopProgramResponse;
	ns1__StopProgramResponse.soap_default(soap);
	soap_default___ns1__StopProgram(soap, &soap_tmp___ns1__StopProgram);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__StopProgram(soap, &soap_tmp___ns1__StopProgram, "-ns1:StopProgram", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->StopProgram(soap_tmp___ns1__StopProgram.ns1__StopProgram, &ns1__StopProgramResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__StopProgramResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StopProgramResponse.soap_put(soap, "ns1:StopProgramResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StopProgramResponse.soap_put(soap, "ns1:StopProgramResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetBoardInfo(UPCBWebServiceSoapService *soap)
{	struct __ns1__GetBoardInfo soap_tmp___ns1__GetBoardInfo;
	_ns1__GetBoardInfoResponse ns1__GetBoardInfoResponse;
	ns1__GetBoardInfoResponse.soap_default(soap);
	soap_default___ns1__GetBoardInfo(soap, &soap_tmp___ns1__GetBoardInfo);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__GetBoardInfo(soap, &soap_tmp___ns1__GetBoardInfo, "-ns1:GetBoardInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetBoardInfo(soap_tmp___ns1__GetBoardInfo.ns1__GetBoardInfo, &ns1__GetBoardInfoResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetBoardInfoResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetBoardInfoResponse.soap_put(soap, "ns1:GetBoardInfoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetBoardInfoResponse.soap_put(soap, "ns1:GetBoardInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetDevices(UPCBWebServiceSoapService *soap)
{	struct __ns1__GetDevices soap_tmp___ns1__GetDevices;
	_ns1__GetDevicesResponse ns1__GetDevicesResponse;
	ns1__GetDevicesResponse.soap_default(soap);
	soap_default___ns1__GetDevices(soap, &soap_tmp___ns1__GetDevices);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__GetDevices(soap, &soap_tmp___ns1__GetDevices, "-ns1:GetDevices", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDevices(soap_tmp___ns1__GetDevices.ns1__GetDevices, &ns1__GetDevicesResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetDevicesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetDevicesResponse.soap_put(soap, "ns1:GetDevicesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetDevicesResponse.soap_put(soap, "ns1:GetDevicesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetDrivers(UPCBWebServiceSoapService *soap)
{	struct __ns1__GetDrivers soap_tmp___ns1__GetDrivers;
	_ns1__GetDriversResponse ns1__GetDriversResponse;
	ns1__GetDriversResponse.soap_default(soap);
	soap_default___ns1__GetDrivers(soap, &soap_tmp___ns1__GetDrivers);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__GetDrivers(soap, &soap_tmp___ns1__GetDrivers, "-ns1:GetDrivers", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetDrivers(soap_tmp___ns1__GetDrivers.ns1__GetDrivers, &ns1__GetDriversResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetDriversResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetDriversResponse.soap_put(soap, "ns1:GetDriversResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetDriversResponse.soap_put(soap, "ns1:GetDriversResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetPrograms(UPCBWebServiceSoapService *soap)
{	struct __ns1__GetPrograms soap_tmp___ns1__GetPrograms;
	_ns1__GetProgramsResponse ns1__GetProgramsResponse;
	ns1__GetProgramsResponse.soap_default(soap);
	soap_default___ns1__GetPrograms(soap, &soap_tmp___ns1__GetPrograms);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__GetPrograms(soap, &soap_tmp___ns1__GetPrograms, "-ns1:GetPrograms", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetPrograms(soap_tmp___ns1__GetPrograms.ns1__GetPrograms, &ns1__GetProgramsResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetProgramsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetProgramsResponse.soap_put(soap, "ns1:GetProgramsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetProgramsResponse.soap_put(soap, "ns1:GetProgramsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetProgram(UPCBWebServiceSoapService *soap)
{	struct __ns1__GetProgram soap_tmp___ns1__GetProgram;
	_ns1__GetProgramResponse ns1__GetProgramResponse;
	ns1__GetProgramResponse.soap_default(soap);
	soap_default___ns1__GetProgram(soap, &soap_tmp___ns1__GetProgram);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__GetProgram(soap, &soap_tmp___ns1__GetProgram, "-ns1:GetProgram", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetProgram(soap_tmp___ns1__GetProgram.ns1__GetProgram, &ns1__GetProgramResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetProgramResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetProgramResponse.soap_put(soap, "ns1:GetProgramResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetProgramResponse.soap_put(soap, "ns1:GetProgramResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetProgramStatus(UPCBWebServiceSoapService *soap)
{	struct __ns1__GetProgramStatus soap_tmp___ns1__GetProgramStatus;
	_ns1__GetProgramStatusResponse ns1__GetProgramStatusResponse;
	ns1__GetProgramStatusResponse.soap_default(soap);
	soap_default___ns1__GetProgramStatus(soap, &soap_tmp___ns1__GetProgramStatus);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__GetProgramStatus(soap, &soap_tmp___ns1__GetProgramStatus, "-ns1:GetProgramStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetProgramStatus(soap_tmp___ns1__GetProgramStatus.ns1__GetProgramStatus, &ns1__GetProgramStatusResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetProgramStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetProgramStatusResponse.soap_put(soap, "ns1:GetProgramStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetProgramStatusResponse.soap_put(soap, "ns1:GetProgramStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetRunningProgramsStatus(UPCBWebServiceSoapService *soap)
{	struct __ns1__GetRunningProgramsStatus soap_tmp___ns1__GetRunningProgramsStatus;
	_ns1__GetRunningProgramsStatusResponse ns1__GetRunningProgramsStatusResponse;
	ns1__GetRunningProgramsStatusResponse.soap_default(soap);
	soap_default___ns1__GetRunningProgramsStatus(soap, &soap_tmp___ns1__GetRunningProgramsStatus);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__GetRunningProgramsStatus(soap, &soap_tmp___ns1__GetRunningProgramsStatus, "-ns1:GetRunningProgramsStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetRunningProgramsStatus(soap_tmp___ns1__GetRunningProgramsStatus.ns1__GetRunningProgramsStatus, &ns1__GetRunningProgramsStatusResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetRunningProgramsStatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetRunningProgramsStatusResponse.soap_put(soap, "ns1:GetRunningProgramsStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetRunningProgramsStatusResponse.soap_put(soap, "ns1:GetRunningProgramsStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
