/* soapUPCBWebServiceSoapProxy.cpp
   Generated by gSOAP 2.8.3 from upcb.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapUPCBWebServiceSoapProxy.h"

UPCBWebServiceSoapProxy::UPCBWebServiceSoapProxy()
{	UPCBWebServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

UPCBWebServiceSoapProxy::UPCBWebServiceSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

UPCBWebServiceSoapProxy::UPCBWebServiceSoapProxy(const char *url)
{	UPCBWebServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

UPCBWebServiceSoapProxy::UPCBWebServiceSoapProxy(soap_mode iomode)
{	UPCBWebServiceSoapProxy_init(iomode, iomode);
}

UPCBWebServiceSoapProxy::UPCBWebServiceSoapProxy(const char *url, soap_mode iomode)
{	UPCBWebServiceSoapProxy_init(iomode, iomode);
	soap_endpoint = url;
}

UPCBWebServiceSoapProxy::UPCBWebServiceSoapProxy(soap_mode imode, soap_mode omode)
{	UPCBWebServiceSoapProxy_init(imode, omode);
}

UPCBWebServiceSoapProxy::~UPCBWebServiceSoapProxy()
{ }

void UPCBWebServiceSoapProxy::UPCBWebServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://tempuri.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void UPCBWebServiceSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void UPCBWebServiceSoapProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *UPCBWebServiceSoapProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *UPCBWebServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *UPCBWebServiceSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *UPCBWebServiceSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int UPCBWebServiceSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

void UPCBWebServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void UPCBWebServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *UPCBWebServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int UPCBWebServiceSoapProxy::AddProgram(const char *endpoint, const char *soap_action, _ns1__AddProgram *ns1__AddProgram, _ns1__AddProgramResponse *ns1__AddProgramResponse)
{	struct soap *soap = this;
	struct __ns1__AddProgram soap_tmp___ns1__AddProgram;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/AddProgram";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddProgram.ns1__AddProgram = ns1__AddProgram;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddProgram(soap, &soap_tmp___ns1__AddProgram);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddProgram(soap, &soap_tmp___ns1__AddProgram, "-ns1:AddProgram", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddProgram(soap, &soap_tmp___ns1__AddProgram, "-ns1:AddProgram", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddProgramResponse)
		return soap_closesock(soap);
	ns1__AddProgramResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddProgramResponse->soap_get(soap, "ns1:AddProgramResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UPCBWebServiceSoapProxy::StartProgram(const char *endpoint, const char *soap_action, _ns1__StartProgram *ns1__StartProgram, _ns1__StartProgramResponse *ns1__StartProgramResponse)
{	struct soap *soap = this;
	struct __ns1__StartProgram soap_tmp___ns1__StartProgram;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/StartProgram";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StartProgram.ns1__StartProgram = ns1__StartProgram;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StartProgram(soap, &soap_tmp___ns1__StartProgram);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StartProgram(soap, &soap_tmp___ns1__StartProgram, "-ns1:StartProgram", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StartProgram(soap, &soap_tmp___ns1__StartProgram, "-ns1:StartProgram", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StartProgramResponse)
		return soap_closesock(soap);
	ns1__StartProgramResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StartProgramResponse->soap_get(soap, "ns1:StartProgramResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UPCBWebServiceSoapProxy::StopProgram(const char *endpoint, const char *soap_action, _ns1__StopProgram *ns1__StopProgram, _ns1__StopProgramResponse *ns1__StopProgramResponse)
{	struct soap *soap = this;
	struct __ns1__StopProgram soap_tmp___ns1__StopProgram;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/StopProgram";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StopProgram.ns1__StopProgram = ns1__StopProgram;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StopProgram(soap, &soap_tmp___ns1__StopProgram);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StopProgram(soap, &soap_tmp___ns1__StopProgram, "-ns1:StopProgram", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StopProgram(soap, &soap_tmp___ns1__StopProgram, "-ns1:StopProgram", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StopProgramResponse)
		return soap_closesock(soap);
	ns1__StopProgramResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StopProgramResponse->soap_get(soap, "ns1:StopProgramResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UPCBWebServiceSoapProxy::GetBoardInfo(const char *endpoint, const char *soap_action, _ns1__GetBoardInfo *ns1__GetBoardInfo, _ns1__GetBoardInfoResponse *ns1__GetBoardInfoResponse)
{	struct soap *soap = this;
	struct __ns1__GetBoardInfo soap_tmp___ns1__GetBoardInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/GetBoardInfo";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetBoardInfo.ns1__GetBoardInfo = ns1__GetBoardInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetBoardInfo(soap, &soap_tmp___ns1__GetBoardInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetBoardInfo(soap, &soap_tmp___ns1__GetBoardInfo, "-ns1:GetBoardInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetBoardInfo(soap, &soap_tmp___ns1__GetBoardInfo, "-ns1:GetBoardInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetBoardInfoResponse)
		return soap_closesock(soap);
	ns1__GetBoardInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetBoardInfoResponse->soap_get(soap, "ns1:GetBoardInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UPCBWebServiceSoapProxy::GetDevices(const char *endpoint, const char *soap_action, _ns1__GetDevices *ns1__GetDevices, _ns1__GetDevicesResponse *ns1__GetDevicesResponse)
{	struct soap *soap = this;
	struct __ns1__GetDevices soap_tmp___ns1__GetDevices;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/GetDevices";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDevices.ns1__GetDevices = ns1__GetDevices;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDevices(soap, &soap_tmp___ns1__GetDevices);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDevices(soap, &soap_tmp___ns1__GetDevices, "-ns1:GetDevices", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDevices(soap, &soap_tmp___ns1__GetDevices, "-ns1:GetDevices", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDevicesResponse)
		return soap_closesock(soap);
	ns1__GetDevicesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDevicesResponse->soap_get(soap, "ns1:GetDevicesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UPCBWebServiceSoapProxy::GetDrivers(const char *endpoint, const char *soap_action, _ns1__GetDrivers *ns1__GetDrivers, _ns1__GetDriversResponse *ns1__GetDriversResponse)
{	struct soap *soap = this;
	struct __ns1__GetDrivers soap_tmp___ns1__GetDrivers;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/GetDrivers";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDrivers.ns1__GetDrivers = ns1__GetDrivers;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDrivers(soap, &soap_tmp___ns1__GetDrivers);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDrivers(soap, &soap_tmp___ns1__GetDrivers, "-ns1:GetDrivers", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDrivers(soap, &soap_tmp___ns1__GetDrivers, "-ns1:GetDrivers", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDriversResponse)
		return soap_closesock(soap);
	ns1__GetDriversResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDriversResponse->soap_get(soap, "ns1:GetDriversResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UPCBWebServiceSoapProxy::GetPrograms(const char *endpoint, const char *soap_action, _ns1__GetPrograms *ns1__GetPrograms, _ns1__GetProgramsResponse *ns1__GetProgramsResponse)
{	struct soap *soap = this;
	struct __ns1__GetPrograms soap_tmp___ns1__GetPrograms;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/GetPrograms";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetPrograms.ns1__GetPrograms = ns1__GetPrograms;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetPrograms(soap, &soap_tmp___ns1__GetPrograms);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetPrograms(soap, &soap_tmp___ns1__GetPrograms, "-ns1:GetPrograms", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetPrograms(soap, &soap_tmp___ns1__GetPrograms, "-ns1:GetPrograms", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetProgramsResponse)
		return soap_closesock(soap);
	ns1__GetProgramsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProgramsResponse->soap_get(soap, "ns1:GetProgramsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UPCBWebServiceSoapProxy::GetProgram(const char *endpoint, const char *soap_action, _ns1__GetProgram *ns1__GetProgram, _ns1__GetProgramResponse *ns1__GetProgramResponse)
{	struct soap *soap = this;
	struct __ns1__GetProgram soap_tmp___ns1__GetProgram;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/GetProgram";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetProgram.ns1__GetProgram = ns1__GetProgram;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProgram(soap, &soap_tmp___ns1__GetProgram);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProgram(soap, &soap_tmp___ns1__GetProgram, "-ns1:GetProgram", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProgram(soap, &soap_tmp___ns1__GetProgram, "-ns1:GetProgram", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetProgramResponse)
		return soap_closesock(soap);
	ns1__GetProgramResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProgramResponse->soap_get(soap, "ns1:GetProgramResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UPCBWebServiceSoapProxy::GetProgramStatus(const char *endpoint, const char *soap_action, _ns1__GetProgramStatus *ns1__GetProgramStatus, _ns1__GetProgramStatusResponse *ns1__GetProgramStatusResponse)
{	struct soap *soap = this;
	struct __ns1__GetProgramStatus soap_tmp___ns1__GetProgramStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/GetProgramStatus";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetProgramStatus.ns1__GetProgramStatus = ns1__GetProgramStatus;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProgramStatus(soap, &soap_tmp___ns1__GetProgramStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProgramStatus(soap, &soap_tmp___ns1__GetProgramStatus, "-ns1:GetProgramStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProgramStatus(soap, &soap_tmp___ns1__GetProgramStatus, "-ns1:GetProgramStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetProgramStatusResponse)
		return soap_closesock(soap);
	ns1__GetProgramStatusResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProgramStatusResponse->soap_get(soap, "ns1:GetProgramStatusResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UPCBWebServiceSoapProxy::GetRunningProgramsStatus(const char *endpoint, const char *soap_action, _ns1__GetRunningProgramsStatus *ns1__GetRunningProgramsStatus, _ns1__GetRunningProgramsStatusResponse *ns1__GetRunningProgramsStatusResponse)
{	struct soap *soap = this;
	struct __ns1__GetRunningProgramsStatus soap_tmp___ns1__GetRunningProgramsStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:49865/UPCBWebService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/GetRunningProgramsStatus";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetRunningProgramsStatus.ns1__GetRunningProgramsStatus = ns1__GetRunningProgramsStatus;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetRunningProgramsStatus(soap, &soap_tmp___ns1__GetRunningProgramsStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetRunningProgramsStatus(soap, &soap_tmp___ns1__GetRunningProgramsStatus, "-ns1:GetRunningProgramsStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetRunningProgramsStatus(soap, &soap_tmp___ns1__GetRunningProgramsStatus, "-ns1:GetRunningProgramsStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetRunningProgramsStatusResponse)
		return soap_closesock(soap);
	ns1__GetRunningProgramsStatusResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetRunningProgramsStatusResponse->soap_get(soap, "ns1:GetRunningProgramsStatusResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
